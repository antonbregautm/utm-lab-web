@model UTM.Gamepad.Domain.User
@{
    ViewBag.Title = "Reset User Password";
}

<div class="container py-5">
    <div class="row mb-4">
        <div class="col-md-8">
            <h2 class="text-primary">
                <i class="fas fa-key"></i> Reset User Password
            </h2>
            <p class="lead text-muted">Set a new password for user <strong>@Model.FullName</strong></p>
        </div>
        <div class="col-md-4 text-right">
            <a href="@Url.Action("EditUser", "Admin", new { id = Model.Id })" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to User Edit
            </a>
        </div>
    </div>

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-circle"></i> @ViewBag.ErrorMessage
        </div>
    }

    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="mb-0">New Password for @Model.Email</h5>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("ResetPassword", "Admin", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Id)

                <div class="form-group">
                    <label for="newPassword"><i class="fas fa-lock"></i> New Password</label>
                        <div class="input-group">
                        <input type="password" class="form-control" id="newPassword" name="newPassword" required
                               pattern=".{6,}" title="Password must be at least 6 characters">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary toggle-password" type="button" tabindex="-1">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    <small class="form-text text-muted">Minimum 6 characters</small>
                    <div class="invalid-feedback">Please enter a password (minimum 6 characters)</div>
                </div>

                <div class="form-group">
                    <label for="confirmPassword"><i class="fas fa-lock"></i> Confirm Password</label>
                        <div class="input-group">
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary toggle-password" type="button" tabindex="-1">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    <div class="invalid-feedback">Please confirm the password</div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Reset Password
                        </button>
                        <a href="@Url.Action("UserList", "Admin")" class="btn btn-outline-secondary ml-2">
                        <i class="fas fa-times"></i> Cancel
                        </a>
                </div>
            }
        </div>
    </div>

    <div class="alert alert-warning mt-4">
        <div class="d-flex">
            <div class="mr-3">
                <i class="fas fa-exclamation-triangle fa-2x"></i>
            </div>
            <div>
                <h5>Important Note</h5>
                <p class="mb-0">
                    After resetting the password, the user will need to use the new password for their next login.
                    Make sure to communicate the new password to the user securely.
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Form validation
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                var forms = document.getElementsByClassName('needs-validation');
                var validation = Array.prototype.filter.call(forms, function(form) {
                    form.addEventListener('submit', function(event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        
                        // Check if passwords match
                        var password = document.getElementById('newPassword');
                        var confirmPassword = document.getElementById('confirmPassword');
                        
                        if (password.value !== confirmPassword.value) {
                            confirmPassword.setCustomValidity('Passwords do not match');
                            event.preventDefault();
                            event.stopPropagation();
                        } else {
                            confirmPassword.setCustomValidity('');
                        }
                        
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
        
        // Toggle password visibility
        document.addEventListener('DOMContentLoaded', function() {
            var toggleButtons = document.getElementsByClassName('toggle-password');
            Array.prototype.filter.call(toggleButtons, function(button) {
            button.addEventListener('click', function() {
                    var input = this.parentNode.parentNode.querySelector('input');
                if (input.type === 'password') {
                    input.type = 'text';
                        this.querySelector('i').classList.remove('fa-eye');
                        this.querySelector('i').classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                        this.querySelector('i').classList.remove('fa-eye-slash');
                        this.querySelector('i').classList.add('fa-eye');
                }
                });
            });
        });
    </script>
} 